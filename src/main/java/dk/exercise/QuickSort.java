package dk.exercise;

/**
 * Утильный класс, который реализует алгоритм быстрой сортировки для списков,
 * реализующих интерфейс {@code MyList}.<p>
 *
 * Быстрая сортировка является одной из наиболее эффективных из существующих в Java.
 * В её основе лежит рекурсивный алгоритм Quick sort.
 * В среднем Quick sort в Java выполняется за время O(n log n),
 * причём точная скорость зависит от выбора опорного элемента.<p>
 *
 * Алгоритм быстрой сортировки Quick sort
 * использует известную стратегию «разделяй и властвуй».
 * Речь идёт о том, чтобы разбивать задачу на подзадачи до той поры,
 * пока перед нами не будет элементарная единица.
 * В нашем случае список делится на несколько подсписков,
 * а каждый из них сортируется отдельно, а потом объединяется в один список.
 */
public class QuickSort {
    /**
     * Сортирует список элементов {@code MyList} по возрастанию алгоритмом <i>QuickSort<i>
     * в соответствии с естественным порядком его элементов.
     * Элементы списка должны имплементировать интерфейс {@code Comparable}.
     *
     * @param list список, который должен быть отсортирован
     * @param <T> тип элементов в этом списке.
     */
    public static <T extends Comparable<T>> void quickSort(MyList<T> list) {
        // Базовый случай: если список пуст или содержит только один элемент, он уже отсортирован.
        if (list.size() <= 1) {
            return;
        }
        // Выбираем опорный элемент
        int pivotIndex = list.size() / 2;
        T pivot = list.get(pivotIndex);
        // Разделяем список на два подсписка: один содержит элементы меньше чем опорный элемент, и другой, больше чем опорный элемент.
        MyList<T> less = new MyArrayList<>();
        MyList<T> greater = new MyArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            if (i != pivotIndex) {
                T element = list.get(i);
                if (element.compareTo(pivot) < 0) {
                    less.add(element);
                } else {
                    greater.add(element);
                }
            }
        }
        // Рекурсивно сортируем два подсписка
        quickSort(less);
        quickSort(greater);
        // Объединяем два отсортированных подсписка и опорный элемент в один отсортированный список.
        list.clear();
        list.addAll(less);
        list.add(pivot);
        list.addAll(greater);
    }
}
